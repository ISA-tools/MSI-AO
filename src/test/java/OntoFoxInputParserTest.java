/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertTrue;


public class OntoFoxInputParserTest {

    private OntoFoxInputParser parser1 = null;
    private OntoFoxInputParser parser2 = null;


    @Before
    public void setUp() throws IOException {
        parser1 = new OntoFoxInputParser(getClass().getResource("/ontofoxInputUO.txt").getPath());
        parser1.parse();
        parser2 = new OntoFoxInputParser(getClass().getResource("/input1.txt").getPath());
        parser2.parse();
    }

    @Test
    public void testParsingURI(){
        assertTrue("paser.getURI() should not be null", parser1.getURI() !=null );
        assertTrue("paser.getURI() has specific value", parser1.getURI().equals("http://purl.obolibrary.org/obo/MSI_AO_UO_imports.owl") );
        assertTrue("paser.getURI() should not be null", parser2.getURI() !=null );
        assertTrue("paser.getURI() has specific value", parser2.getURI().equals("http://purl.obolibrary.org/obo/example.owl") );
    }

    @Test
    public void testParsingSourceOntology() throws IOException {
        assertTrue("paser.getSourceOntology() should not be null", parser1.getSourceOntology() !=null );
        System.out.println(parser1.getSourceOntology());
        assertTrue("paser.getSourceOntolgy() has specific value", parser1.getSourceOntology().equals("UO") );
        assertTrue("paser.getSourceOntology() should not be null", parser2.getSourceOntology() !=null );
        System.out.println(parser2.getSourceOntology());
        assertTrue("paser.getSourceOntolgy() has specific value", parser2.getSourceOntology().equals("NCBITaxon") );
    }

    @Test
    public void testParsingLowerIRIs() throws IOException {
        assertTrue("paser.getLowerIRIs() should not be null", parser1.getLowerIRIs() !=null );
        System.out.println(parser1.getLowerIRIs().size());
        assertTrue("paser.getLowerIRIs() has specific value", parser1.getLowerIRIs().size()==18 );
        assertTrue("paser.getLowerIRIs() should not be null", parser2.getLowerIRIs() !=null );
        System.out.println(parser2.getLowerIRIs().size());
        assertTrue("paser.getLowerIRIs() has specific value", parser2.getLowerIRIs().size()==1 );
    }

    @Test
    public void testParsingUpperRIs() throws IOException {
        assertTrue("paser.getUpperIRIs() should not be null", parser1.getUpperIRIs() !=null );
        assertTrue("paser.getUpperIRIs() has specific value", parser1.getUpperIRIs().size()==1 );
        assertTrue("paser.getUpperIRIs() should not be null", parser2.getUpperIRIs() !=null );
        assertTrue("paser.getUpperIRIs() has specific value", parser2.getUpperIRIs().size()==2 );
    }

    @Test
    public void testParsingSourceRetrievalSetting() throws IOException {
        assertTrue("paser.getSourceRetrievalSetting() should not be null", parser1.getSourceRetrievalSetting() !=null );
        assertTrue("paser.getSourceRetrievalSetting() has specific value", parser1.getSourceRetrievalSetting().equals("includeNoIntermediates"));
        assertTrue("paser.getSourceRetrievalSetting() should not be null", parser2.getSourceRetrievalSetting() !=null );
        assertTrue("paser.getSourceRetrievalSetting() has specific value", parser2.getSourceRetrievalSetting().equals("includeNoIntermediates"));
    }


    @Test
    public void testParsingSourceAnnotationURIs() throws IOException {
        assertTrue("paser.getSourceAnnotationURIs() should not be null", parser1.getSourceAnnotationURIs() !=null );
        assertTrue("paser.getSourceAnnotationURIs() has specific value", parser1.getSourceAnnotationURIs().size()==0);
        assertTrue("paser.getSourceAnnotationURIs() should not be null", parser2.getSourceAnnotationURIs() !=null );
        assertTrue("paser.getSourceAnnotationURIs() has specific value", parser2.getSourceAnnotationURIs().size()==3);
    }

    @Test
    public void testParsingSourceAnnotationSetting() throws IOException {
        assertTrue("paser.getSourceAnnotationSetting() should not be null", parser1.getSourceAnnotationSetting() !=null );
        System.out.println(parser1.getSourceAnnotationURIs());
        assertTrue("paser.getSourceAnnotationSetting() has specific value", parser1.getSourceAnnotationSetting().equals("includeAllAnnotationProperties"));
        assertTrue("paser.getSourceAnnotationSetting() should not be null", parser2.getSourceAnnotationSetting() ==null );
        System.out.println(parser1.getSourceAnnotationURIs());
    }

}
